# A script to split the model file generated by sqlacodegen

def main(): 
    filename = 'model.py'
    model_file = open(filename, "r")

    within_class = False
    new_filename = None
    file_array = []

    for row in model_file:
        if row.startswith('class'): # If we encounter a class.
            print(row)
            if within_class is True: # If we've already started an array to be exported as a file.
                print_new_file(new_filename, file_array)
                file_array[:] = []
                row_truncated = row[6:]
                new_filename = row_truncated.split("(")[0] # Grab everything from the title of the class name before the open parenthesis.
                file_array.append(row) # Add the row to the file_array
            else: # If this is the beginning of a new file array.
                within_class = True
                row_truncated = row[6:]
                new_filename = row_truncated.split("(")[0] # Grab everything from the title of the class name before the open parenthesis.
                file_array.append(row) # Add the row to the file_array
        else:
            file_array.append(row)
            
def print_new_file(new_filename, file_array):
    print('exporting' + new_filename)
    print(file_array)
    new_filename_ext = new_filename.lower() + '.py' # Create new Python filename.
    with open(new_filename_ext, 'w+') as f:
        f.write('from sqlalchemy import *\n')
        f.write('from model.base import Base\n')
        f.write('from sqlalchemy.orm import relationship\n')
        f.write('\n')
        f.write('metadata = Base.metadata\n')
        for output_row in file_array:
            f.write(output_row)
    f.close()

    with open('__init__.py', 'a+') as initfile:
        line_to_write = 'from model.tables.' + new_filename.lower() + ' import ' + new_filename + '\n'
        initfile.write(line_to_write)
    initfile.close()

if __name__ == "__main__":
    main()